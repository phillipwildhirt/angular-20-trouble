@use 'sass:math';
// comment the import after building
// @import '../../../variables.scss';

// Top section redefines button mixins.

@mixin button-icon-variant(
  $color,
  $background: transparentize($color, 1),
  $hover-background: transparentize($color, .85),
  $hover-color: $color,
  $active-background: $color,
  $active-border: $active-background,
  //if($color == $color-contrast-light, shade-color($border, $btn-active-border-shade-amount), tint-color($border, $btn-active-border-tint-amount))
  $active-color: if(color-contrast($color) == $color-contrast-light, color-contrast($color), shade-color($color, 65)),
  $disabled-background: $background,
  $disabled-color: transparentize($color, .5)
) {
  color: $color;
  @include gradient-bg($background);

  &:hover,
  &.hover {
    color: $hover-color;
    @include gradient-bg($hover-background);
  }

  &:focus,
  &.focus {
    color: $hover-color;
    @include gradient-bg($hover-background);
    @if $enable-shadows {
      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $color, 15%), .5));
    }
  }

  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: $active-color;
    background-color: $active-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);

    &:focus {
      @if $enable-shadows {
        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $color, 15%), .5));
      }
    }
  }

  &:disabled,
  &.disabled {
    color: $disabled-color;
    background-color: $disabled-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
  }
  @content
}

@mixin button-icon-toggle-variant(
  $color,
  $color-toggled,
  $color-untoggled: $color,
  $background: transparentize($color-toggled, 1),
  $hover-background: transparentize($color-toggled, .9),
  $hover-color-toggled: $color-toggled,
  $hover-color-untoggled: $color,
  $active-background: $color-toggled,
  $active-border: $active-background,
  $cr-color: contrast-ratio($color),
  $cr-bg: contrast-ratio($active-background),
  $contrast-ratio-delta: math.max($cr-color, $cr-bg) - math.min($cr-color, $cr-bg),
  $active-color: if($color == $color-toggled,
                    if(color-contrast($color) == $color-contrast-light, color-contrast($color), shade-color($color, 65)),
                    if($contrast-ratio-delta < 2.2,
                      if(math.max($cr-color, $cr-bg) == $cr-bg, tint-color($color, 35%), shade-color($color, 50%)),
                      if($cr-color > 6.5 and $cr-bg > 6.5,
                          if(math.max($cr-color, $cr-bg) == $cr-bg, tint-color($color, 35%), shade-color($color, 50%)),
                        $color)
                      )
                    ),
  $disabled-background: $background,
  $disabled-color: transparentize($color, .5)
) {
  color: $color-untoggled;
  @include gradient-bg($background);

  &:hover,
  &.hover {
    color: $hover-color-untoggled;
    @include gradient-bg($hover-background);
  }

  &:focus,
  &.focus {
    @include gradient-bg($hover-background);
    @if $enable-shadows {
      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color-toggled, $color-toggled, 15%), .5));
    }
  }

  &.tog {
    color: $color-toggled;
  }

  &:active,
  &.active {
    color: $active-color;
    background-color: $active-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
  }

  &:disabled,
  &.disabled {
    color: $disabled-color;
    background-color: $disabled-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
  }
}

@mixin button-icon-size($size, $font-size, $border-radius) {
  min-height: $size;
  max-height: $size;
  min-width: $size;
  max-width: $size;
  @include font-size($font-size);
  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius, 0);
}

@mixin button-icon-with-text-size($size, $font-size, $border-radius) {
  min-height: $size;
  max-height: $size;
  min-width: $size;
  padding: 0 map-get($spacers, "1");
  @include font-size($font-size);
  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius, 0);
}

// End top section.

// Bottom section actually creates btn-icon style.

$btn-size: 2rem;
$btn-size-lg: $btn-size;
$btn-size-sm: 1.5rem;
$btn-icon-font-size: 1.15rem;
$btn-icon-font-size-lg: 1.35rem;
$btn-icon-font-size-sm: 1rem;

.btn-ic {
  display: inline-block;
  font-family: $btn-font-family;
  font-weight: $btn-font-weight;
  line-height: $btn-icon-font-size;
  padding: 0;
  color: var(--bs-body-color);
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  background-color: transparent;
  border: 0 solid transparent;
  @include transition(color 0s, background-color 0s, border-color 0s, box-shadow 0s);

  &:not(.btn-ic-text) {
    @include button-icon-size($btn-size, $btn-icon-font-size, $btn-border-radius);
  }
  &.btn-ic-text {
    @include button-icon-with-text-size($btn-size, $btn-icon-font-size, $btn-border-radius);
  }

  &:hover {
    color: var(--bs-body-color);
    text-decoration: if($link-hover-decoration == underline, none, null);
    @include transition($btn-transition);
  }

  &:focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
    @include transition(color .15s .1s ease-in-out, background-color .15s .1s ease-in-out, border-color .15s .1s ease-in-out, box-shadow .15s .1s ease-in-out);
  }

  &:active,
  &.active {
    @include box-shadow($btn-active-box-shadow);
    @include transition(color 0s, background-color 0s, border-color 0s, box-shadow 0s);

    &:focus {
      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
      @include transition(color 0s, background-color 0s, border-color 0s, box-shadow 0s);
    }
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    pointer-events: none;
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }
}

@each $color, $value in $theme-colors {
  .btn-ic-#{$color} {
    @include button-icon-variant($value) {
      /* TODO this creates 3000+ lines of styles for toggle buttons. Perhaps we can trim it when DPS design is further along.
          We would need to create a new map of each of the toggled colors we use in variables.scss,
          and iterate only over that for each theme color. theme colors (~13) * toggled color map (maybe ~5)
       */
      @each $color-toggled, $value-toggled in $theme-colors {
        &.btn-ic-tog-#{$color-toggled} {
          @include button-icon-toggle-variant($value, $value-toggled);
        }
      }
    }
  }
}

.btn-ic-lg {
  &:not(.btn-ic-text) {
    @include button-icon-size($btn-size-lg, $btn-icon-font-size-lg, $btn-border-radius);
  }
  &.btn-ic-text {
    @include button-icon-with-text-size($btn-size-lg, $btn-icon-font-size-lg, $btn-border-radius);
  }
}

.btn-ic-sm {
  &:not(.btn-ic-text) {
    @include button-icon-size($btn-size-sm, $btn-icon-font-size-sm, $btn-border-radius);
  }
  &.btn-ic-text {
    @include button-icon-with-text-size($btn-size-sm, $btn-icon-font-size-sm, $btn-border-radius);
  }
}

// End bottom section.
